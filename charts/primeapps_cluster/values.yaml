# Default values for PrimeApps
app:
  serviceType: NodePort
  servicePort: 80
  servicePortSecure: 443
  containerPort: 80
  containerPortSecure: 443
  component: app
  replicas: 1
  image: eu.gcr.io/primeapps-gke/primeapps-app
  imageTag: master
  imagePullPolicy: Always
  pullsecret: container-registry-secret
  cpu: 10m
  memory: 256Mi
  ingress:
    enabled: true
    hostname: test.primeapps.io
    annotations:
     kubernetes.io/ingress.class: ngi98nx
     certmanager.k8s.io/cluster-issuer: letsencrypt-prod
     kubernetes.io/tls-acme: "true"
    tls: true
  probes:
    enabled: false
  secrets:
      ConnectionStrings:
        AuthDBConnection: server=primeapps.database.svc.cluster.local;port=5432;username=postgres;password=pr!meApps!0;database=auth;command timeout=0;keepalive=30;
        TenantDBConnection: server=primeapps.database.svc.cluster.local;port=5432;username=postgres;password=pr!meApps!0;database=dev;command timeout=0;keepalive=30;
        PlatformDBConnection: server=primeapps.database.svc.cluster.local;port=5432;username=postgres;password=pr!meApps!0;database=platform;command timeout=0;keepalive=30;
        StorageConnection: primeapps-storage.primeapps.svc.cluster.local:9000
      AppSettings:
        EnableJobs: "true"
        AllowInsecureHttp: "true"
        StorageAccessKey: "ofisim-storage"
        StorageSecretKey: "veryHiddenSecretNoOneCanGuess:O"
        TestMode: "true"
        BlobUrl: "http://file-dev.ofisim.com"
        FunctionUrl: "http://localhost:7071"
        EmailSMTPEnableSsl: "true"
        EmailSMTPHost: "smtp.sendgrid.net"
        EmailSMTPPort: "587"
        EmailSMTPUser: "apikey"
        EmailSMTPPassword: "password"
        EmailSMTPHostTest: "smtp.mailtrap.io"
        EmailSMTPPortTest: "465"
        EmailSMTPUserTest: "b12c70f7f50ca9"
        EmailSMTPPasswordTest: "2cfb87c728981a"
        WarehouseServer: "ofisim-dwh-dev.database.windows.net"
        WarehouseMasterUser: "ofisim"
        WarehouseMasterPassword: "0f!s!mDev"
        PowerbiAccessKey: "n+3uhoGPMk7fCEB7J+ThW1vVE+1XJDQsHzkUbn0KJZ+tcqVmobO0XmIhKvis4tkOlwhfWALsI6o4dPGzYN+nIA=="
        PowerbiWorkspaceCollection: "OfisimDev"
        AzureStorage.ConnectionString: "DefaultEndpointsProtocol=https;AccountName=ofisimcomdev;AccountKey=uFQDgZlv6UVtP9Lbq3zOjiXC5pm8riBL3BVum1nHojQPL8AI+iYCj9x2HBypqXJ0yXhy0rAqNLjIZxydQblRwA==;"
        AzureSearch.Storage: "ofisimdev"
        AzureSearch.AdminKey: "044D958A74716C3622C6977E47AA3FEE"
        UseCdn: "false"
        AuthenticationServerURL: "https://auth-dev.primeapps.io"
        ClientId: "primeapps"
        ClientSecret: "secret"
        RequireHttps: "true"
        ForwardHeaders: "true"
        HttpsRedirection: "true"
        KubernetesClusterRootUrl: "http://kubernetes.default.svc.cluster.local"
      webOptimizer:
        enableCaching: "false"
        enableMemoryCache: "false"
        enableDiskCache: "false"
        cacheDirectory: "/var/temp/weboptimizercache"
        enableTagHelperBundling: "false"
      Sentry:
        Dsn: "https://494e887684744adfaa39328e539a2a95@sentry-dev.primeapps.io/3"
        IncludeRequestPayload: "true"
        IncludeActivityData: "true"
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
auth:
  serviceType: NodePort
  servicePort: 80
  servicePortSecure: 443
  containerPort: 80
  containerPortSecure: 443
  component: auth
  replicas: 1
  image: eu.gcr.io/primeapps-gke/primeapps-auth
  imageTag: master
  imagePullPolicy: Always
  ##Secrets
  pullsecret: container-registry-secret
  cpu: 10m
  memory: 256Mi
  ## Ingress settings
  ingress:
    enabled: true
    hostname: auth-test.primeapps.io
    annotations:
     kubernetes.io/ingress.class: nginx
     certmanager.k8s.io/cluster-issuer: letsencrypt-prod
     kubernetes.io/tls-acme: "true"
    tls: true
  probes:
    enabled: false
  secrets:
      ConnectionStrings:
        AuthDBConnection: "server=primeapps.database.svc.cluster.local;port=5432;username=postgres;password=pr!meApps!0;database=auth;command timeout=0;keepalive=30;"
        TenantDBConnection: "server=primeapps.database.svc.cluster.local;port=5432;username=postgres;password=pr!mepps!0;database=dev;command timeout=0;keepalive=30;"
        PlatformDBConnection: "server=primeapps.database.svc.cluster.local;port=5432;username=postgres;password=pr!meApps!0;database=platform;command timeout=0;keepalive=30;"
        StorageConnection: "primeapps-minio.primeapps.svc.cluster.local:9000"
      AppSettings:
        AuthCertLocation: "/cert/primeapps_id4.pfx"
        AuthCertExportKey: "1q2w3e4r5t"
        PublicOrigin: "https://auth-test.primeapps.io"
        ValidUrls: "localhost;primeapps.io"
        ForwardHeaders: "true"
        HttpsRedirection: "true"
        AuthUrl: "https://auth-test.primeapps.io"
      webOptimizer:
        enableCaching: "false"
        enableMemoryCache: "false"
        enableDiskCache: "false"
        cacheDirectory: "/var/temp/weboptimizercache"
        enableTagHelperBundling: "false"
      Sentry:
        Dsn: "https://72fdb461a2344589bad128b3cd2d135a@sentry-dev.primeapps.io/5"
        IncludeRequestPayload: "true"
        IncludeActivityData: "true"
kubeless: 
  enabled: true
  rbac:
   create: true
   ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      certmanager.k8s.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - functions-test.primeapps.io
    tls:
     - secretName: functions-test-tls
       hosts:
         - functions-test.primeapps.io
nats:
 enabled: true
 auth:
   enabled: true
   user: primeapps
   password: 'pr!meApps!0'
 networkPolicy:
   ## Enable creation of NetworkPolicy resources.
   enabled: true
 replicaCount: 1
redis:
  enabled: true
  rbac:
    create: true
  cluster:
   enabled: false
   slaveCount: 0
  usePassword: true
  password: 'pr!meApps!0'
  master:
    port: 6379
    service:
      type: LoadBalancer
      port: 6379
    persistence:
      enabled: true
      path: /bitnami/redis/data
      subPath: ""
      storageClass: "gp2"
      accessModes:
      - ReadWriteOnce
      size: 8Gi
  slave:
    service:
      ## Redis Slave Service type
      type: ClusterIP
rabbitmq:
  enabled: true
  rbacEnabled: true
  rabbitmq:
    username: primeapps
    password: 'pr!meApps!0'
    diskFreeLimit: '"6GiB"'
  service:
    type: ClusterIP
  persistence:
    enabled: true
    storageClass: "gp2"
    accessMode: ReadWriteOnce
    # If you change this value, you might have to adjust `rabbitmq.diskFreeLimit` as well.
    size: 8Gi
  ingress:
    enabled: true
    hostName: rabbitmq-test.primeapps.io
    tls: true
    tlsSecret: rabbitmq-test-tls
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: true
sentry:
  enabled: true
  web:
    replicacount: 1
  cron:
    replicacount: 1
  worker:
    replicacount: 1
  user:
    create: true
    email: teknik@ofisim.com
    password: 'pr!meApps!0'
  email:
    from_address: teknik@ofisim.com
    host: smtp.office365.com
    port: 587
    use_tls: true
    user: teknik@ofisim.com
    password: '0f!s!mCRM'
    enable_replies: false
  persistence:
    enabled: true
    storageClass: "gp2"
    accessMode: ReadWriteOnce
    size: 8Gi
  ingress:
    enabled: true
    hostname: sentry-test.primeapps.io
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: 'true'
  tls:
     - secretName: sentry-test.primeapps.io
       hosts:
         - sentry-test.primeapps.io
  postgresql:
    host: primeapps.database.svc.cluster.local
    user: postgres
    password: 'pr!meApps!0'
    database: sentry
  redis:
    host: primeapps-redis-master.primeapps.svc.cluster.local
    password: 'pr!meApps!0'
minio:
  enabled: true
  fullnameOverride: "primeapps-storage"
  mode: standalone
  existingSecret: ""
  accessKey: "AKIAIOSFODNN7EXAMPLE"
  secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
  configPath: "/root/.minio/"
  mountPath: "/export"
  replicas: 2
  tls:
    enabled: false
    ## Create a secret with private.key and public.crt files and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
    certSecret: ""
    publicCrt: public.crt
    privateKey: private.key
  persistence:
    enabled: true
    storageClass: gp2
    accessMode: ReadWriteOnce
    size: 10Gi
  service:
    type: ClusterIP
  ingress:
    enabled: true
    annotations:
       kubernetes.io/ingress.class: nginx
       kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - storage-test.primeapps.io
    tls: 
      - secretName: storage-test-tls
        hosts:
          - storage-test.primeapps.io
  minioConfig:
    region: "eu-west-1"
    browser: "on"
    domain: "storage-test.primeapps.io"
    redis:
      enable: true
      format: "namespace"
      address: "primeapps-redis-master.primeapps.svc.cluster.local:6379"
      password: "pr!meApps!0"
      key: "minio"
  networkPolicy:
    enabled: true
    allowExternal: true