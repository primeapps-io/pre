﻿@using PrimeApps.App.Models
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@model PrimeApps.App.Models.ResetPasswordBindingModel

@{
	//Layout = "~/Views/Shared/_LoginPartial.cshtml";

	ViewBag.Title = "Register";
	Layout = "~/Views/Shared/_LayoutAuth.cshtml";

	var app = "crm";
	var desc = "Ofisim CRM";
	var color = "#135dea";
	var logo = ViewBag.AppInfo["logo"].Value;
	if (ViewBag.AppInfo != null)
	{
		app = ViewBag.AppInfo["app"].Value;
		desc = ViewBag.AppInfo["desc_" + ViewBag.Lang].Value;
		color = ViewBag.AppInfo["color"].Value;
		ViewBag.Title = ViewBag.AppInfo["title"].Value;
	}
	var lang = ViewBag.Lang == "tr" ? "en" : "tr";
	var error = ViewBag.Error;

}

<div class="col-md-4 login-sec">
	<img class="logo-img" src="@Url.Content(logo)" />
	<form asp-controller="Auth" asp-action="ResetPassword" asp-route-returnurl="@ViewBag.ReturnUrl" asp-route-token="@ViewBag.Token" asp-route-uid="@ViewBag.Uid" method="post" class="login-form" role="form" id="reset-form">
@Html.AntiForgeryToken()
<div class="form-group">
	<div class="input-group input-group-first">
		<span class="input-group-addon">
			<span class="flaticon-padlock50"></span>
		</span>
		<!--<label for="exampleInputEmail1" class="text-uppercase">E-Posta</label>-->
@Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = @Localizer["Password"] })
</div>
</div>
<div class="form-group">
	<div class="input-group">
		<span class="input-group-addon">
			<span class="flaticon-padlock50"></span>
		</span>
		<!--<label for="exampleInputEmail1" class="text-uppercase">E-Posta</label>-->
@Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", @placeholder = @Localizer["PasswordConfirm"] })
</div>
</div>
@if (error != null)
		{
			if (error == "invalidToken")
			{
<div class="error">r</div>
			}
			else
			{
<div class="error">d</div>
			}
}
<div class="error-all"></div>
<div class="error-pass"></div>
<div class="form-check">
	<button type="submit" class="btn btn-login btn-block ladda-button" data-style="slide-right">d</button>
	<div class="language">
		<a href="@Url.Action(" Login", "Auth" , new {ReturnUrl=ViewBag.ReturnUrl})" class="">t</a>
	</div>
</div>
</form>
	@*using (Html.BeginForm("ResetPassword", "Auth", new { ReturnUrl = ViewBag.ReturnUrl, Token = ViewBag.Token, Uid = ViewBag.Uid }, FormMethod.Post, new { @class = "login-form", role = "form", id = "reset-form" }))
	{

	}*@
</div>



@section scripts {
	<script type="text/javascript">
        $(document).ready(function() {
            var postTry = false;

            $("#ConfirmPassword, #Password").keyup(function() {
                if (postTry) {
					if (fieldsHasValue()) {
						$(".error-all").removeClass("error");
						$(".error-all").text("");
						passwordValidator();
					} else {
						removeFieldErrors();
						$(".error-all").addClass("error");
						$(".error-all").text(@Html.Raw(Localizer["RegisterFieldsRequired"]));
                    }
                }
            });

            $(".btn-login").click(function(e) {
                postTry = true;
                var l = Ladda.create(this);
                l.start();
                if (fieldsHasValue()) {
                    $(".error-all").removeClass("error");
                    $(".error-all").text("");
                    if (!passwordValidator()) {
                        e.stopPropagation();
                        e.preventDefault();
                        l.stop();
                    } else {
                        $("#reset-form").submit();
                    }
                } else {
                    $(".error-all").addClass("error");
                    $(".error-all").text(@Html.Raw(Localizer["RegisterFieldsRequired"]));
                    e.stopPropagation();
                    e.preventDefault();
                    l.stop();
                }
            });

            function fieldsHasValue() {
                var confirmPasswordValue = $("#ConfirmPassword").val();
                var passwordValue = $("#Password").val();
                if (confirmPasswordValue === "" || passwordValue === "") {
                    return false;
                }
                return true;
            }

            function passwordValidator() {
                var isValid = true;
                var fieldValue = $("#Password").val();
                var fieldConfirmValue = $("#ConfirmPassword").val();
                if (fieldValue === "") {
                    removeFieldErrors();
                    $(".error-all").addClass("error");
                    $(".error-all").text(@Html.Raw(Localizer["RegisterFieldsRequired"]));
                    isValid = false;
                } else if (fieldValue.length < 6) {
                    $(".error-pass").addClass("error");
                    $(".error-pass").text(@Html.Raw(Localizer["PasswordMinimum"]));
                    isValid = false;
                } else if (fieldValue !== fieldConfirmValue) {
                    $(".error-pass").addClass("error");
                    $(".error-pass").text(@Html.Raw(Localizer["PasswordNotMatch"]));
                    isValid = false;
                } else {
                    $(".error-pass").removeClass("error");
                    $(".error-pass").text("");
                }
                return isValid;
            }

            function removeFieldErrors() {
                $(".error-pass").removeClass("error");
                $(".error-pass").text("");
            }

            $("input").focus(function(e) {
                $(e.target).closest(".input-group").addClass("input-focus");
            });

            $("input").blur(function(e) {
                $(e.target).closest(".input-group").removeClass("input-focus");
            });
        });
	</script>

}