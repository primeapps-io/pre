// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrimeApps.Model.Context;

namespace PrimeApps.Model.Migrations.PlatformDB
{
    [DbContext(typeof(PlatformDBContext))]
    partial class PlatformDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(4000);

                    b.Property<string>("Logo")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(400);

                    b.Property<int?>("TemplateId")
                        .HasColumnName("template_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("apps");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date");

                    b.Property<int>("Day")
                        .HasColumnName("day");

                    b.Property<decimal>("Eur")
                        .HasColumnName("eur");

                    b.Property<int>("Month")
                        .HasColumnName("month");

                    b.Property<decimal>("Usd")
                        .HasColumnName("usd");

                    b.Property<int>("Year")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("Day");

                    b.HasIndex("Month");

                    b.HasIndex("Year");

                    b.ToTable("exchange_rates");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.ActiveDirectoryCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte[]>("CacheBits")
                        .HasColumnName("cache_bits");

                    b.Property<DateTime>("LastWrite")
                        .HasColumnName("last_write");

                    b.Property<string>("UniqueId")
                        .HasColumnName("unique_id");

                    b.HasKey("Id");

                    b.ToTable("active_directory_cache");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.ActiveDirectoryTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("AdminConsented")
                        .HasColumnName("admin_consented");

                    b.Property<bool>("Confirmed")
                        .HasColumnName("confirmed");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnName("issuer")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.ToTable("active_directory_tenants");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("AllowedOrigin")
                        .HasColumnName("allowed_origin")
                        .HasMaxLength(200);

                    b.Property<int>("ApplicationType")
                        .HasColumnName("application_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int>("RefreshTokenLifeTime")
                        .HasColumnName("refresh_token_life_time");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnName("secret");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.PlatformUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ActiveDirectoryEmail")
                        .HasColumnName("active_directory_email");

                    b.Property<int>("ActiveDirectoryTenantId")
                        .HasColumnName("active_directory_tenant_id");

                    b.Property<int>("AppId")
                        .HasColumnName("app_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("Culture")
                        .HasColumnName("culture");

                    b.Property<string>("Currency")
                        .HasColumnName("currency");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(510);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end_date_utc");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<int?>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AccessFailedCount");

                    b.HasIndex("ActiveDirectoryEmail");

                    b.HasIndex("AppId");

                    b.HasIndex("Currency");

                    b.HasIndex("Email");

                    b.HasIndex("EmailConfirmed");

                    b.HasIndex("FirstName");

                    b.HasIndex("Id");

                    b.HasIndex("LastName");

                    b.HasIndex("LockoutEnabled");

                    b.HasIndex("LockoutEnd");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("PasswordHash");

                    b.HasIndex("PhoneNumberConfirmed");

                    b.HasIndex("TenantId");

                    b.HasIndex("TwoFactorEnabled");

                    b.ToTable("users");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnName("expires_utc");

                    b.Property<DateTime>("IssuedUtc")
                        .HasColumnName("issued_utc");

                    b.Property<string>("ProtectedTicket")
                        .IsRequired()
                        .HasColumnName("protected_ticket");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.PlatformWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Completed")
                        .HasColumnName("completed");

                    b.Property<string>("DatabaseName")
                        .HasColumnName("database_name");

                    b.Property<string>("DatabaseUser")
                        .HasColumnName("database_user");

                    b.Property<string>("PowerbiWorkspaceId")
                        .HasColumnName("powerbi_workspace_id");

                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id");

                    b.HasIndex("Completed");

                    b.HasIndex("DatabaseName");

                    b.HasIndex("TenantId");

                    b.ToTable("warehouse");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Currency")
                        .HasColumnName("currency");

                    b.Property<string>("CustomColor")
                        .HasColumnName("custom_color");

                    b.Property<string>("CustomDescription")
                        .HasColumnName("custom_description");

                    b.Property<string>("CustomDomain")
                        .HasColumnName("custom_domain");

                    b.Property<string>("CustomFavicon")
                        .HasColumnName("custom_favicon");

                    b.Property<string>("CustomImage")
                        .HasColumnName("custom_image");

                    b.Property<string>("CustomTitle")
                        .HasColumnName("custom_title");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnName("deactivated_at");

                    b.Property<Guid>("GuidId")
                        .HasColumnName("guid_id");

                    b.Property<bool?>("HasAnalytics")
                        .HasColumnName("has_analytics");

                    b.Property<bool>("HasAnalyticsLicense")
                        .HasColumnName("has_analytics_license");

                    b.Property<bool?>("HasPhone")
                        .HasColumnName("has_phone");

                    b.Property<bool?>("HasSampleData")
                        .HasColumnName("has_sample_data");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnName("is_deactivated");

                    b.Property<bool>("IsPaidCustomer")
                        .HasColumnName("is_paid_customer");

                    b.Property<bool>("IsSuspended")
                        .HasColumnName("is_suspended");

                    b.Property<string>("Language")
                        .HasColumnName("language");

                    b.Property<string>("Logo")
                        .HasColumnName("logo");

                    b.Property<string>("MailSenderEmail")
                        .HasColumnName("mail_sender_email");

                    b.Property<string>("MailSenderName")
                        .HasColumnName("mail_sender_name");

                    b.Property<int>("ModuleLicenseCount")
                        .HasColumnName("module_license_count");

                    b.Property<int>("OwnerId")
                        .HasColumnName("owner");

                    b.Property<DateTime?>("SuspendedAt")
                        .HasColumnName("suspended_at");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<int>("UserLicenseCount")
                        .HasColumnName("user_license_count");

                    b.HasKey("Id");

                    b.HasIndex("CustomDomain");

                    b.HasIndex("CustomTitle");

                    b.HasIndex("DeactivatedAt");

                    b.HasIndex("GuidId");

                    b.HasIndex("HasAnalytics");

                    b.HasIndex("HasAnalyticsLicense");

                    b.HasIndex("HasPhone");

                    b.HasIndex("HasSampleData");

                    b.HasIndex("IsDeactivated");

                    b.HasIndex("IsPaidCustomer");

                    b.HasIndex("IsSuspended");

                    b.HasIndex("Language");

                    b.HasIndex("MailSenderEmail");

                    b.HasIndex("ModuleLicenseCount");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SuspendedAt");

                    b.HasIndex("UserLicenseCount");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.UserApp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<int>("AppId")
                        .HasColumnName("app_id");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<int>("MainTenantId")
                        .HasColumnName("main_tenant_id");

                    b.Property<int>("TenantId")
                        .HasColumnName("tenant_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("AppId");

                    b.HasIndex("Email");

                    b.HasIndex("MainTenantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("user_apps");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>");


                    b.ToTable("user_claims");

                    b.HasDiscriminator().HasValue("ApplicationRoleClaim");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.ApplicationUserLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>");


                    b.ToTable("user_logins");

                    b.HasDiscriminator().HasValue("ApplicationUserLogin");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");


                    b.ToTable("user_roles");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Platform.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Platform.Identity.PlatformUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Platform.Identity.PlatformUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Platform.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Platform.Identity.PlatformUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Platform.Identity.PlatformUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Identity.PlatformUser", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Platform.App", "App")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Platform.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Platform.Tenant", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Platform.Identity.PlatformUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
