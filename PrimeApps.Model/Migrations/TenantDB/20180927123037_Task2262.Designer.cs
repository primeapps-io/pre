// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrimeApps.Model.Context;

namespace PrimeApps.Model.Migrations.TenantDB
{
    [DbContext(typeof(TenantDBContext))]
    [Migration("20180927123037_Task2262")]
    partial class Task2262
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ActionButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<string>("CssClass")
                        .HasColumnName("css_class");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Dependent")
                        .HasColumnName("dependent");

                    b.Property<string>("DependentField")
                        .HasColumnName("dependent_field");

                    b.Property<string>("Icon")
                        .HasColumnName("icon");

                    b.Property<int>("MethodType")
                        .HasColumnName("method_type");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.Property<string>("Parameters")
                        .HasColumnName("parameters");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnName("template");

                    b.Property<int>("Trigger")
                        .HasColumnName("trigger");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("action_buttons");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ActionButtonPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActionButtonId")
                        .HasColumnName("action_button_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ActionButtonId", "ProfileId")
                        .IsUnique()
                        .HasName("action_button_permissions_IX_action_button_id_profile_id");

                    b.ToTable("action_button_permissions");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Analytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasMaxLength(50);

                    b.Property<string>("MenuIcon")
                        .HasColumnName("menu_icon")
                        .HasMaxLength(100);

                    b.Property<string>("PbixUrl")
                        .IsRequired()
                        .HasColumnName("pbix_url");

                    b.Property<string>("PowerBiReportId")
                        .HasColumnName("powerbi_report_id");

                    b.Property<int>("SharingType")
                        .HasColumnName("sharing_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("PowerBiReportId");

                    b.HasIndex("SharingType");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("analytics");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.AnalyticShares", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("AnaltyicId")
                        .HasColumnName("analytic_id");

                    b.HasKey("UserId", "AnaltyicId");

                    b.HasIndex("AnaltyicId");

                    b.ToTable("analytic_shares");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AuditType")
                        .HasColumnName("audit_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int?>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("RecordActionType")
                        .HasColumnName("record_action_type");

                    b.Property<int?>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<string>("RecordName")
                        .HasColumnName("record_name")
                        .HasMaxLength(50);

                    b.Property<int>("SetupActionType")
                        .HasColumnName("setup_action_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Calculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<double?>("CustomValue")
                        .HasColumnName("custom_value");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field1")
                        .HasColumnName("field1")
                        .HasMaxLength(50);

                    b.Property<string>("Field2")
                        .HasColumnName("field2")
                        .HasMaxLength(50);

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnName("operator")
                        .HasMaxLength(1);

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<string>("ResultField")
                        .IsRequired()
                        .HasColumnName("result_field")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("calculations");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<string>("RecordJson")
                        .HasColumnName("record");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedById");

                    b.ToTable("changelogs");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnName("caption")
                        .HasMaxLength(100);

                    b.Property<int>("ChartType")
                        .HasColumnName("chart_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int?>("ReportId")
                        .HasColumnName("report_id");

                    b.Property<string>("SubCaption")
                        .HasColumnName("sub_caption")
                        .HasMaxLength(200);

                    b.Property<int>("Theme")
                        .HasColumnName("theme");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("XaxisName")
                        .IsRequired()
                        .HasColumnName("x_axis_name")
                        .HasMaxLength(80);

                    b.Property<string>("YaxisName")
                        .IsRequired()
                        .HasColumnName("y_axis_name")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ReportId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("charts");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Components", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(15);

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("Place")
                        .HasColumnName("place");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("components");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ConversionMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id");

                    b.Property<int>("MappingFieldId")
                        .HasColumnName("mapping_field_id");

                    b.Property<int>("MappingModuleId")
                        .HasColumnName("mapping_module_id");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("MappingModuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("conversion_mappings");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ConversionSubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("MappingModuleId")
                        .HasColumnName("sub_module_id");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("SubModuleDestinationField")
                        .HasColumnName("submodule_destination_field");

                    b.Property<string>("SubModuleSourceField")
                        .HasColumnName("submodule_source_field");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("MappingModuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("conversion_sub_modules");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("SharingType")
                        .HasColumnName("sharing_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SharingType");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("dashboard");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Dashlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ChartId")
                        .HasColumnName("chart_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<int?>("DashboardId")
                        .HasColumnName("dashboard_id");

                    b.Property<int>("DashletArea")
                        .HasColumnName("dashlet_area");

                    b.Property<int>("DashletType")
                        .HasColumnName("dashlet_type");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int?>("WidgetId")
                        .HasColumnName("widget_id");

                    b.Property<int>("XTileHeight")
                        .HasColumnName("x_tile_height");

                    b.Property<int>("YTileLength")
                        .HasColumnName("y_tile_length");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DashboardId");

                    b.HasIndex("Deleted");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WidgetId");

                    b.ToTable("dashlets");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ChildField")
                        .HasColumnName("child_field")
                        .HasMaxLength(50);

                    b.Property<string>("ChildSection")
                        .HasColumnName("child_section")
                        .HasMaxLength(50);

                    b.Property<bool>("Clear")
                        .HasColumnName("clear");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("DependencyType")
                        .HasColumnName("dependency_type");

                    b.Property<string>("FieldMapChild")
                        .HasColumnName("field_map_child")
                        .HasMaxLength(50);

                    b.Property<string>("FieldMapParent")
                        .HasColumnName("field_map_parent")
                        .HasMaxLength(50);

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<bool>("Otherwise")
                        .HasColumnName("otherwise");

                    b.Property<string>("ParentField")
                        .IsRequired()
                        .HasColumnName("parent_field")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("ValueMap")
                        .HasColumnName("value_map")
                        .HasMaxLength(4000);

                    b.Property<string>("Values")
                        .HasColumnName("values")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("dependencies");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long>("FileSize")
                        .HasColumnName("file_size");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.Property<string>("UniqueName")
                        .HasColumnName("unique_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AddressType")
                        .HasColumnName("address_type");

                    b.Property<string>("AutoNumberPrefix")
                        .HasColumnName("auto_number_prefix")
                        .HasMaxLength(10);

                    b.Property<string>("AutoNumberSuffix")
                        .HasColumnName("auto_number_suffix")
                        .HasMaxLength(10);

                    b.Property<int>("CalendarDateType")
                        .HasColumnName("calendar_date_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnName("currency_symbol")
                        .HasMaxLength(10);

                    b.Property<string>("CustomLabel")
                        .HasColumnName("custom_label")
                        .HasMaxLength(1000);

                    b.Property<int>("DataType")
                        .HasColumnName("data_type");

                    b.Property<byte>("DecimalPlaces")
                        .HasColumnName("decimal_places");

                    b.Property<string>("DefaultValue")
                        .HasColumnName("default_value")
                        .HasMaxLength(500);

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<bool>("DisplayDetail")
                        .HasColumnName("display_detail");

                    b.Property<bool>("DisplayForm")
                        .HasColumnName("display_form");

                    b.Property<bool>("DisplayList")
                        .HasColumnName("display_list");

                    b.Property<bool>("DocumentSearch")
                        .HasColumnName("document_search");

                    b.Property<bool>("Editable")
                        .HasColumnName("editable");

                    b.Property<bool>("Encrypted")
                        .HasColumnName("encrypted");

                    b.Property<string>("EncryptionAuthorizedUsers")
                        .HasColumnName("encryption_authorized_users");

                    b.Property<int>("ImageSizeDetail")
                        .HasColumnName("image_size_detail");

                    b.Property<int>("ImageSizeList")
                        .HasColumnName("image_size_list");

                    b.Property<bool>("InlineEdit")
                        .HasColumnName("inline_edit");

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnName("label_en")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnName("label_tr")
                        .HasMaxLength(50);

                    b.Property<string>("LookupRelation")
                        .HasColumnName("lookup_relation")
                        .HasMaxLength(50);

                    b.Property<int>("LookupSearchType")
                        .HasColumnName("lookup_search_type");

                    b.Property<string>("LookupType")
                        .HasColumnName("lookup_type")
                        .HasMaxLength(50);

                    b.Property<string>("Mask")
                        .HasColumnName("mask")
                        .HasMaxLength(100);

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("MultilineType")
                        .HasColumnName("multiline_type");

                    b.Property<bool>("MultilineTypeUseHtml")
                        .HasColumnName("multiline_type_use_html");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<int?>("PicklistId")
                        .HasColumnName("picklist_id");

                    b.Property<int>("PicklistSortorder")
                        .HasColumnName("picklist_sortorder");

                    b.Property<string>("Placeholder")
                        .HasColumnName("placeholder")
                        .HasMaxLength(400);

                    b.Property<int>("Position")
                        .HasColumnName("position");

                    b.Property<bool>("Primary")
                        .HasColumnName("primary");

                    b.Property<bool>("PrimaryLookup")
                        .HasColumnName("primary_lookup");

                    b.Property<int>("Rounding")
                        .HasColumnName("rounding");

                    b.Property<string>("Section")
                        .HasColumnName("section")
                        .HasMaxLength(50);

                    b.Property<byte>("SectionColumn")
                        .HasColumnName("section_column");

                    b.Property<bool>("ShowAsDropdown")
                        .HasColumnName("show_as_dropdown");

                    b.Property<bool>("ShowLabel")
                        .HasColumnName("show_label");

                    b.Property<bool>("ShowOnlyEdit")
                        .HasColumnName("show_only_edit");

                    b.Property<string>("StyleInput")
                        .HasColumnName("style_input")
                        .HasMaxLength(400);

                    b.Property<string>("StyleLabel")
                        .HasColumnName("style_label")
                        .HasMaxLength(400);

                    b.Property<int>("SystemType")
                        .HasColumnName("system_type");

                    b.Property<string>("UniqueCombine")
                        .HasColumnName("unique_combine")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int>("ViewType")
                        .HasColumnName("view_type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("PicklistId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ModuleId", "Name")
                        .IsUnique()
                        .HasName("fields_IX_module_id_name");

                    b.ToTable("fields");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldCombination", b =>
                {
                    b.Property<int>("FieldId")
                        .HasColumnName("field_id");

                    b.Property<string>("CombinationCharacter")
                        .HasColumnName("combination_character")
                        .HasMaxLength(50);

                    b.Property<string>("Field1")
                        .IsRequired()
                        .HasColumnName("field1")
                        .HasMaxLength(50);

                    b.Property<string>("Field2")
                        .IsRequired()
                        .HasColumnName("field2")
                        .HasMaxLength(50);

                    b.HasKey("FieldId");

                    b.ToTable("field_combinations");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id");

                    b.Property<string>("FilterField")
                        .IsRequired()
                        .HasColumnName("filter_field")
                        .HasMaxLength(120);

                    b.Property<int>("No");

                    b.Property<int>("Operator");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FieldId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("field_filters");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("FieldId", "ProfileId")
                        .HasName("field_permissions_IX_field_id_profile_id");

                    b.ToTable("field_permissions");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldValidation", b =>
                {
                    b.Property<int>("FieldId")
                        .HasColumnName("field_id");

                    b.Property<double?>("Max")
                        .HasColumnName("max");

                    b.Property<short?>("MaxLength")
                        .HasColumnName("max_length");

                    b.Property<double?>("Min")
                        .HasColumnName("min");

                    b.Property<short?>("MinLength")
                        .HasColumnName("min_length");

                    b.Property<string>("Pattern")
                        .HasColumnName("pattern")
                        .HasMaxLength(200);

                    b.Property<bool?>("Readonly")
                        .HasColumnName("readonly");

                    b.Property<bool?>("Required")
                        .HasColumnName("required");

                    b.Property<bool?>("Unique")
                        .HasColumnName("unique");

                    b.HasKey("FieldId");

                    b.ToTable("field_validations");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Help", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("CustomHelp")
                        .HasColumnName("custom_help");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<bool>("FirstScreen")
                        .HasColumnName("first_screen");

                    b.Property<int>("ModalType")
                        .HasColumnName("modal_type");

                    b.Property<int?>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("ModuleType")
                        .HasColumnName("module_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("RouteUrl")
                        .HasColumnName("route_url");

                    b.Property<int>("ShowType")
                        .HasColumnName("show_type");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnName("template");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("helps");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Import", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("ExcelUrl")
                        .HasColumnName("excel_url");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("TotalCount")
                        .HasColumnName("total_count");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("imports");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Default")
                        .HasColumnName("default");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("menu");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<bool>("IsDynamic")
                        .HasColumnName("is_dynamic");

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnName("label_en")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnName("label_tr")
                        .HasMaxLength(50);

                    b.Property<string>("MenuIcon")
                        .HasColumnName("menu_icon")
                        .HasMaxLength(100);

                    b.Property<int>("MenuId")
                        .HasColumnName("menu_id");

                    b.Property<int?>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<string>("Route")
                        .HasColumnName("route")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MenuId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("menu_items");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CalendarColorDark")
                        .HasColumnName("calendar_color_dark");

                    b.Property<string>("CalendarColorLight")
                        .HasColumnName("calendar_color_light");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("DetailViewType")
                        .HasColumnName("detail_view_type");

                    b.Property<bool>("Display")
                        .HasColumnName("display");

                    b.Property<bool>("DisplayCalendar")
                        .HasColumnName("display_calendar");

                    b.Property<string>("LabelEnPlural")
                        .IsRequired()
                        .HasColumnName("label_en_plural")
                        .HasMaxLength(50);

                    b.Property<string>("LabelEnSingular")
                        .IsRequired()
                        .HasColumnName("label_en_singular")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTrPlural")
                        .IsRequired()
                        .HasColumnName("label_tr_plural")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTrSingular")
                        .IsRequired()
                        .HasColumnName("label_tr_singular")
                        .HasMaxLength(50);

                    b.Property<bool>("LocationEnabled")
                        .HasColumnName("location_enabled");

                    b.Property<string>("MenuIcon")
                        .HasColumnName("menu_icon")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<int>("Sharing")
                        .HasColumnName("sharing");

                    b.Property<int>("SystemType")
                        .HasColumnName("system_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ModuleProfileSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<bool>("Display")
                        .HasColumnName("display");

                    b.Property<string>("LabelEnPlural")
                        .IsRequired()
                        .HasColumnName("label_en_plural")
                        .HasMaxLength(50);

                    b.Property<string>("LabelEnSingular")
                        .IsRequired()
                        .HasColumnName("label_en_singular")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTrPlural")
                        .IsRequired()
                        .HasColumnName("label_tr_plural")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTrSingular")
                        .IsRequired()
                        .HasColumnName("label_tr_singular")
                        .HasMaxLength(50);

                    b.Property<string>("MenuIcon")
                        .HasColumnName("menu_icon")
                        .HasMaxLength(100);

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Profiles")
                        .HasColumnName("profiles");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("module_profile_settings");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int?>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int?>("NoteId")
                        .HasColumnName("note_id");

                    b.Property<int?>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("NoteId");

                    b.HasIndex("RecordId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.NoteLikes", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("NoteId")
                        .HasColumnName("note_id");

                    b.HasKey("UserId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("note_likes");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AttachmentContainer")
                        .HasColumnName("attachment_container")
                        .HasMaxLength(50);

                    b.Property<string>("AttachmentLink")
                        .HasColumnName("attachment_link")
                        .HasMaxLength(500);

                    b.Property<string>("AttachmentName")
                        .HasColumnName("attachment_name")
                        .HasMaxLength(50);

                    b.Property<string>("Bcc")
                        .HasColumnName("bcc");

                    b.Property<string>("Cc")
                        .HasColumnName("cc");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("EmailField")
                        .HasColumnName("email_field")
                        .HasMaxLength(50);

                    b.Property<string>("Ids")
                        .IsRequired()
                        .HasColumnName("ids");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnName("lang");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("NotificationType")
                        .HasColumnName("type");

                    b.Property<string>("PhoneField")
                        .HasColumnName("phone_field")
                        .HasMaxLength(50);

                    b.Property<string>("Query")
                        .HasColumnName("query");

                    b.Property<DateTime>("QueueDate")
                        .HasColumnName("queue_date");

                    b.Property<string>("Result")
                        .HasColumnName("result");

                    b.Property<string>("Rev")
                        .HasColumnName("rev");

                    b.Property<string>("SenderAlias")
                        .HasColumnName("sender_alias")
                        .HasMaxLength(50);

                    b.Property<string>("SenderEmail")
                        .HasColumnName("sender_email")
                        .HasMaxLength(50);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasMaxLength(128);

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnName("template");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("NotificationType");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Picklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnName("label_en")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnName("label_tr")
                        .HasMaxLength(50);

                    b.Property<string>("MigrationId")
                        .HasColumnName("migration_id");

                    b.Property<int>("SystemType")
                        .HasColumnName("system_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("LabelEn")
                        .IsUnique();

                    b.HasIndex("LabelTr")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("picklists");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.PicklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<bool>("Inactive")
                        .HasColumnName("inactive");

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnName("label_en")
                        .HasMaxLength(100);

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnName("label_tr")
                        .HasMaxLength(100);

                    b.Property<string>("MigrationId")
                        .HasColumnName("migration_id")
                        .HasMaxLength(50);

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<int>("PicklistId")
                        .HasColumnName("picklist_id");

                    b.Property<string>("SystemCode")
                        .HasColumnName("system_code")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasMaxLength(100);

                    b.Property<string>("Value2")
                        .HasColumnName("value2")
                        .HasMaxLength(100);

                    b.Property<string>("Value3")
                        .HasColumnName("value3")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("PicklistId");

                    b.HasIndex("SystemCode")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("picklist_items");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("ApproverField")
                        .HasColumnName("approver_field");

                    b.Property<int>("ApproverType")
                        .HasColumnName("approver_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("Frequency")
                        .HasColumnName("frequency");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<string>("Operations")
                        .IsRequired()
                        .HasColumnName("operations")
                        .HasMaxLength(50);

                    b.Property<string>("Profiles")
                        .HasColumnName("profiles");

                    b.Property<int>("TriggerTime")
                        .HasColumnName("trigger_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("processes");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<int>("ProcessId")
                        .HasColumnName("process_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ProcessId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("process_approvers");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<int>("No");

                    b.Property<int>("Operator");

                    b.Property<int>("ProcessId")
                        .HasColumnName("process_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ProcessId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("process_filters");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("ProcessId")
                        .HasColumnName("process_id");

                    b.Property<int>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RecordId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("process_logs");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Module")
                        .HasColumnName("module");

                    b.Property<int>("OperationType")
                        .HasColumnName("operation_type");

                    b.Property<int>("ProcessId")
                        .HasColumnName("process_id");

                    b.Property<int>("ProcessStatusOrder")
                        .HasColumnName("process_status_order");

                    b.Property<int>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<int>("Status")
                        .HasColumnName("process_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("Module");

                    b.HasIndex("OperationType");

                    b.HasIndex("ProcessId");

                    b.HasIndex("ProcessStatusOrder");

                    b.HasIndex("RecordId");

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("process_requests");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("BusinessIntelligence")
                        .HasColumnName("business_intelligence");

                    b.Property<bool>("Calendar")
                        .HasColumnName("calendar");

                    b.Property<bool>("CollectiveAnnualLeave")
                        .HasColumnName("collective_annual_leave");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Dashboard")
                        .HasColumnName("dashboard");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("DocumentSearch")
                        .HasColumnName("document_search");

                    b.Property<bool>("ExportData")
                        .HasColumnName("export_data");

                    b.Property<bool>("HasAdminRights")
                        .HasColumnName("has_admin_rights");

                    b.Property<bool>("Home")
                        .HasColumnName("home");

                    b.Property<bool>("ImportData")
                        .HasColumnName("import_data");

                    b.Property<bool>("IsPersistent")
                        .HasColumnName("is_persistent");

                    b.Property<bool>("LeadConvert")
                        .HasColumnName("lead_convert");

                    b.Property<string>("MigrationId")
                        .HasColumnName("migration_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<bool>("Newsfeed")
                        .HasColumnName("newsfeeed");

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<bool>("Report")
                        .HasColumnName("report");

                    b.Property<bool>("SendEmail")
                        .HasColumnName("send_email");

                    b.Property<bool>("SendSMS")
                        .HasColumnName("send_sms");

                    b.Property<string>("StartPage")
                        .HasColumnName("startpage");

                    b.Property<string>("SystemCode")
                        .HasColumnName("system_code");

                    b.Property<bool>("Tasks")
                        .HasColumnName("tasks");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<bool>("WordPdfDownload")
                        .HasColumnName("word_pdf_download");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProfilePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Modify")
                        .HasColumnName("modify");

                    b.Property<int?>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<bool>("Read")
                        .HasColumnName("read");

                    b.Property<bool>("Remove")
                        .HasColumnName("remove");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<bool>("Write")
                        .HasColumnName("write");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ProfileId");

                    b.ToTable("profile_permissions");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("DetailViewType")
                        .HasColumnName("detail_view_type");

                    b.Property<string>("DisplayFields")
                        .IsRequired()
                        .HasColumnName("display_fields")
                        .HasMaxLength(1000);

                    b.Property<string>("LabelEnPlural")
                        .IsRequired()
                        .HasColumnName("label_en_plural")
                        .HasMaxLength(50);

                    b.Property<string>("LabelEnSingular")
                        .IsRequired()
                        .HasColumnName("label_en_singular")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTrPlural")
                        .IsRequired()
                        .HasColumnName("label_tr_plural")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTrSingular")
                        .IsRequired()
                        .HasColumnName("label_tr_singular")
                        .HasMaxLength(50);

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<bool>("Readonly")
                        .HasColumnName("readonly");

                    b.Property<string>("RelatedModule")
                        .IsRequired()
                        .HasColumnName("related_module");

                    b.Property<string>("RelationField")
                        .HasColumnName("relation_field")
                        .HasMaxLength(50);

                    b.Property<int>("RelationType")
                        .HasColumnName("relation_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("relations");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int?>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int?>("Owner")
                        .HasColumnName("owner");

                    b.Property<int?>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<DateTime?>("RemindedOn")
                        .HasColumnName("reminded_on");

                    b.Property<DateTime>("ReminderEnd")
                        .HasColumnName("reminder_end");

                    b.Property<int?>("ReminderFrequency")
                        .HasColumnName("reminder_frequency");

                    b.Property<string>("ReminderScope")
                        .IsRequired()
                        .HasColumnName("reminder_scope")
                        .HasMaxLength(70);

                    b.Property<DateTime>("ReminderStart")
                        .HasColumnName("reminder_start");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasColumnName("reminder_type")
                        .HasMaxLength(20);

                    b.Property<string>("Rev")
                        .HasColumnName("rev")
                        .HasMaxLength(30);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(200);

                    b.Property<int>("TimeZoneOffset")
                        .HasColumnName("timezone_offset");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ReminderScope");

                    b.HasIndex("ReminderType");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("reminders");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("FilterLogic")
                        .HasColumnName("filter_logic")
                        .HasMaxLength(200);

                    b.Property<string>("GroupField")
                        .HasColumnName("group_field");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int>("ReportFeed")
                        .HasColumnName("report_feed");

                    b.Property<int>("ReportType")
                        .HasColumnName("report_type");

                    b.Property<int>("SharingType")
                        .HasColumnName("sharing_type");

                    b.Property<int>("SortDirection")
                        .HasColumnName("sort_direction");

                    b.Property<string>("SortField")
                        .HasColumnName("sort_field");

                    b.Property<string>("SqlFunction")
                        .HasColumnName("sql_function");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SharingType");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportAggregation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AggregationType")
                        .HasColumnName("type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReportId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("report_aggregations");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("report_categories");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReportId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("report_fields");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<int>("No");

                    b.Property<int>("Operator");

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReportId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("report_filters");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportShares", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id");

                    b.HasKey("UserId", "ReportId");

                    b.HasIndex("ReportId");

                    b.ToTable("report_shares");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("DescriptionEn")
                        .HasColumnName("description_en")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionTr")
                        .HasColumnName("description_tr")
                        .HasMaxLength(500);

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnName("label_en")
                        .HasMaxLength(200);

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnName("label_tr")
                        .HasMaxLength(200);

                    b.Property<bool>("Master")
                        .HasColumnName("master");

                    b.Property<string>("MigrationId")
                        .HasColumnName("migration_id");

                    b.Property<string>("Owners")
                        .HasColumnName("owners");

                    b.Property<int?>("ReportsToId")
                        .HasColumnName("reports_to_id");

                    b.Property<bool>("ShareData")
                        .HasColumnName("share_data");

                    b.Property<string>("SystemCode")
                        .HasColumnName("system_code");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReportsToId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte>("ColumnCount")
                        .HasColumnName("column_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomLabel")
                        .HasColumnName("custom_label")
                        .HasMaxLength(1000);

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<bool>("DisplayDetail")
                        .HasColumnName("display_detail");

                    b.Property<bool>("DisplayForm")
                        .HasColumnName("display_form");

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnName("label_en")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnName("label_tr")
                        .HasMaxLength(50);

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<short>("Order")
                        .HasColumnName("order");

                    b.Property<int>("SystemType")
                        .HasColumnName("system_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ModuleId", "Name")
                        .IsUnique()
                        .HasName("sections_IX_module_id_name");

                    b.ToTable("sections");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.SectionPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("SectionId")
                        .HasColumnName("section_id");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("SectionId", "ProfileId")
                        .IsUnique()
                        .HasName("section_permissions_IX_section_id_profile_id");

                    b.ToTable("section_permissions");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("Key");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("settings_IX_user_id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("FieldId")
                        .HasColumnName("field_id");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasMaxLength(400);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FieldId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("Language")
                        .HasColumnName("language");

                    b.Property<string>("Module")
                        .HasColumnName("module");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<int>("SharingType")
                        .HasColumnName("sharing_type");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasMaxLength(200);

                    b.Property<int>("TemplateType")
                        .HasColumnName("template_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("SharingType");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Id", "Code")
                        .IsUnique();

                    b.ToTable("templates");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.TemplatePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int>("TemplateId")
                        .HasColumnName("template_id");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("TemplateId", "ProfileId")
                        .IsUnique()
                        .HasName("template_permissions_IX_template_id_profile_id");

                    b.ToTable("template_permissions");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.TemplateShares", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("TemplateId")
                        .HasColumnName("template_id");

                    b.HasKey("UserId", "TemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("template_shares");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByEmail")
                        .HasColumnName("created_by");

                    b.Property<string>("Culture")
                        .HasColumnName("culture")
                        .HasMaxLength(10);

                    b.Property<string>("Currency")
                        .HasColumnName("currency")
                        .HasMaxLength(3);

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(200);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("full_name")
                        .HasMaxLength(400);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSubscriber")
                        .HasColumnName("is_subscriber");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(50);

                    b.Property<string>("Picture")
                        .HasColumnName("picture");

                    b.Property<int?>("ProfileId")
                        .HasColumnName("profile_id");

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByEmail")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Deleted");

                    b.HasIndex("Email");

                    b.HasIndex("FullName");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("users");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.UserCustomShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Modules")
                        .HasColumnName("modules");

                    b.Property<int>("SharedUserId")
                        .HasColumnName("shared_user_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserGroups")
                        .HasColumnName("user_groups");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("Users")
                        .HasColumnName("users");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SharedUserId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("user_custom_shares");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("user_groups");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.UsersUserGroup", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("UserGroupId")
                        .HasColumnName("group_id");

                    b.HasKey("UserId", "UserGroupId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("users_user_groups");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.View", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("FilterLogic")
                        .HasColumnName("filter_logic")
                        .HasMaxLength(200);

                    b.Property<string>("LabelEn")
                        .IsRequired()
                        .HasColumnName("label_en")
                        .HasMaxLength(50);

                    b.Property<string>("LabelTr")
                        .IsRequired()
                        .HasColumnName("label_tr")
                        .HasMaxLength(50);

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("SharingType")
                        .HasColumnName("sharing_type");

                    b.Property<string>("SystemCode")
                        .HasColumnName("system_code")
                        .HasMaxLength(50);

                    b.Property<int>("SystemType")
                        .HasColumnName("system_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SharingType");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ModuleId", "SystemCode")
                        .IsUnique()
                        .HasName("views_IX_module_id_system_code");

                    b.ToTable("views");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int>("ViewId")
                        .HasColumnName("view_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ViewId");

                    b.ToTable("view_fields");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<int>("No");

                    b.Property<int>("Operator");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ViewId")
                        .HasColumnName("view_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ViewId");

                    b.ToTable("view_filters");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewShares", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("ViewId")
                        .HasColumnName("view_id");

                    b.HasKey("UserId", "ViewId");

                    b.HasIndex("ViewId");

                    b.ToTable("view_shares");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActiveView")
                        .HasColumnName("active_view");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int?>("RowPerPage")
                        .HasColumnName("row_per_page");

                    b.Property<int>("SortDirection")
                        .HasColumnName("sort_direction");

                    b.Property<string>("SortField")
                        .HasColumnName("sort_field")
                        .HasMaxLength(120);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("ModuleId", "UserId")
                        .IsUnique()
                        .HasName("view_states_IX_module_id_user_id");

                    b.ToTable("view_states");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasColumnName("color")
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasMaxLength(30);

                    b.Property<string>("LoadUrl")
                        .HasColumnName("load_url")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<int?>("ReportId")
                        .HasColumnName("report_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int?>("ViewId")
                        .HasColumnName("view_id");

                    b.Property<int>("WidgetType")
                        .HasColumnName("widget_type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ReportId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ViewId");

                    b.ToTable("widgets");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("ChangedField")
                        .HasColumnName("changed_field")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("Frequency")
                        .HasColumnName("frequency");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<string>("Operations")
                        .IsRequired()
                        .HasColumnName("operations")
                        .HasMaxLength(50);

                    b.Property<int>("ProcessFilter")
                        .HasColumnName("process_filter");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.ToTable("workflows");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<int>("No");

                    b.Property<int>("Operator");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("WorkflowId")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WorkflowId");

                    b.ToTable("workflow_filters");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<int>("ModuleId")
                        .HasColumnName("module_id");

                    b.Property<int>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnName("updated_by");

                    b.Property<int>("WorkflowId")
                        .HasColumnName("workflow_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Deleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RecordId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("WorkflowId");

                    b.ToTable("workflow_logs");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowNotification", b =>
                {
                    b.Property<int>("WorkflowId")
                        .HasColumnName("workflow_id");

                    b.Property<string>("Bcc")
                        .HasColumnName("bcc")
                        .HasMaxLength(4000);

                    b.Property<string>("CC")
                        .HasColumnName("cc")
                        .HasMaxLength(4000);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message");

                    b.Property<string>("Recipients")
                        .IsRequired()
                        .HasColumnName("recipients")
                        .HasMaxLength(4000);

                    b.Property<int?>("Schedule")
                        .HasColumnName("schedule");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(200);

                    b.HasKey("WorkflowId");

                    b.ToTable("workflow_notifications");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowTask", b =>
                {
                    b.Property<int>("WorkflowId")
                        .HasColumnName("workflow_id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(2000);

                    b.Property<int>("Owner")
                        .HasColumnName("owner");

                    b.Property<int?>("ReminderRecurrence")
                        .HasColumnName("reminder_recurrence");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(2000);

                    b.Property<int>("TaskDueDate")
                        .HasColumnName("task_due_date");

                    b.Property<int?>("TaskNotification")
                        .HasColumnName("task_notification");

                    b.Property<int?>("TaskPriority")
                        .HasColumnName("task_priority");

                    b.Property<DateTime?>("TaskReminder")
                        .HasColumnName("task_reminder");

                    b.Property<int?>("TaskStatus")
                        .HasColumnName("task_status");

                    b.HasKey("WorkflowId");

                    b.ToTable("workflow_tasks");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowUpdate", b =>
                {
                    b.Property<int>("WorkflowId")
                        .HasColumnName("workflow_id");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnName("field")
                        .HasMaxLength(120);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("module")
                        .HasMaxLength(120);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasMaxLength(2000);

                    b.HasKey("WorkflowId");

                    b.ToTable("workflow_updates");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowWebhook", b =>
                {
                    b.Property<int>("WorkflowId")
                        .HasColumnName("workflow_id");

                    b.Property<string>("CallbackUrl")
                        .IsRequired()
                        .HasColumnName("callback_url")
                        .HasMaxLength(500);

                    b.Property<int>("MethodType")
                        .HasColumnName("method_type");

                    b.Property<string>("Parameters")
                        .HasColumnName("parameters");

                    b.HasKey("WorkflowId");

                    b.ToTable("workflow_webhooks");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ActionButton", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ActionButtonPermission", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.ActionButton", "ActionButton")
                        .WithMany("Permissions")
                        .HasForeignKey("ActionButtonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Analytic", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.AnalyticShares", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Analytic", "Analytic")
                        .WithMany("Shares")
                        .HasForeignKey("AnaltyicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "TenantUser")
                        .WithMany("SharedAnalytics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.AuditLog", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ModuleId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Calculation", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Calculations")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ChangeLog", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Chart", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Components", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Components")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ConversionMapping", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "MappingModule")
                        .WithMany()
                        .HasForeignKey("MappingModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ConversionSubModule", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "MappingSubModule")
                        .WithMany()
                        .HasForeignKey("MappingModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Dashboard", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Dashlet", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Chart", "Chart")
                        .WithMany()
                        .HasForeignKey("ChartId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Dashboard", "Dashboard")
                        .WithMany()
                        .HasForeignKey("DashboardId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Dependency", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Dependencies")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Document", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Field", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Fields")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Picklist", "Picklist")
                        .WithMany()
                        .HasForeignKey("PicklistId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldCombination", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Field", "Field")
                        .WithOne("Combination")
                        .HasForeignKey("PrimeApps.Model.Entities.Tenant.FieldCombination", "FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldFilter", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Field", "Field")
                        .WithMany("Filters")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldPermission", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Field", "Field")
                        .WithMany("Permissions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.FieldValidation", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Field", "Field")
                        .WithOne("Validation")
                        .HasForeignKey("PrimeApps.Model.Entities.Tenant.FieldValidation", "FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Help", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Import", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Menu", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.MenuItem", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.MenuItem", "Parent")
                        .WithMany("MenuItems")
                        .HasForeignKey("ParentId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Module", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ModuleProfileSetting", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Note", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Notes")
                        .HasForeignKey("ModuleId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Note", "Parent")
                        .WithMany("Notes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.NoteLikes", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Note", "Note")
                        .WithMany("NoteLikes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "TenantUser")
                        .WithMany("LikedNotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Notification", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Notifications")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Picklist", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.PicklistItem", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Picklist", "Picklist")
                        .WithMany("Items")
                        .HasForeignKey("PicklistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Process", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessApprover", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Process", "Process")
                        .WithMany("Approvers")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessFilter", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Process", "Process")
                        .WithMany("Filters")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessLog", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Process", "Process")
                        .WithMany("Logs")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProcessRequest", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Process", "Process")
                        .WithMany("Requests")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Profile", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ProfilePermission", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany("Permissions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Relation", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Relations")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Reminder", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Reminders")
                        .HasForeignKey("ModuleId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Report", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.ReportCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportAggregation", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Report", "Report")
                        .WithMany("Aggregations")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportCategory", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportField", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Report", "Report")
                        .WithMany("Fields")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportFilter", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Report", "Report")
                        .WithMany("Filters")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ReportShares", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Report", "Report")
                        .WithMany("Shares")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "TenantUser")
                        .WithMany("SharedReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Role", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Role", "ReportsTo")
                        .WithMany()
                        .HasForeignKey("ReportsToId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Section", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany("Sections")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.SectionPermission", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Section", "Section")
                        .WithMany("Permissions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Setting", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Tag", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Template", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.TemplatePermission", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Template", "Template")
                        .WithMany("Permissions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.TemplateShares", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Template", "Template")
                        .WithMany("Shares")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "TenantUser")
                        .WithMany("SharedTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.TenantUser", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.UserCustomShare", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "SharedUser")
                        .WithMany()
                        .HasForeignKey("SharedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.UserGroup", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.UsersUserGroup", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.View", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewField", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.View", "View")
                        .WithMany("Fields")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewFilter", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.View", "View")
                        .WithMany("Filters")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewShares", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany("SharedViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.View", "View")
                        .WithMany("Shares")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.ViewState", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Widget", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.View", "View")
                        .WithMany()
                        .HasForeignKey("ViewId");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.Workflow", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowFilter", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Workflow", "Workflow")
                        .WithMany("Filters")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowLog", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PrimeApps.Model.Entities.Tenant.TenantUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("PrimeApps.Model.Entities.Tenant.Workflow", "Workflow")
                        .WithMany("Logs")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowNotification", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Workflow", "Workflow")
                        .WithOne("SendNotification")
                        .HasForeignKey("PrimeApps.Model.Entities.Tenant.WorkflowNotification", "WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowTask", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Workflow", "Workflow")
                        .WithOne("CreateTask")
                        .HasForeignKey("PrimeApps.Model.Entities.Tenant.WorkflowTask", "WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowUpdate", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Workflow", "Workflow")
                        .WithOne("FieldUpdate")
                        .HasForeignKey("PrimeApps.Model.Entities.Tenant.WorkflowUpdate", "WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PrimeApps.Model.Entities.Tenant.WorkflowWebhook", b =>
                {
                    b.HasOne("PrimeApps.Model.Entities.Tenant.Workflow", "Workflow")
                        .WithOne("WebHook")
                        .HasForeignKey("PrimeApps.Model.Entities.Tenant.WorkflowWebhook", "WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
