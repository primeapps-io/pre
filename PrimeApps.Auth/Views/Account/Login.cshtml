@model LoginViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
	ViewBag.Title = "Login";
	Layout = "~/Views/Shared/_LayoutAuth.cshtml";

	var app = "primeapps";
	var logo = "";
	var customDomain = false;
	string customLanguage = null;
	bool multiLanguage = true;
	var path = Context.Request.Path.Value + Context.Request.QueryString.Value;
	if (ViewBag.AppInfo != null)
	{
		logo = ViewBag.AppInfo["logo"].Value;
		app = ViewBag.AppInfo["app"].Value;
		multiLanguage = Convert.ToBoolean(ViewBag.AppInfo["multiLanguage"].Value.ToLower());
		ViewBag.Title = ViewBag.AppInfo["title"].Value;
		customDomain = ViewBag.AppInfo["customDomain"] != null ? ViewBag.AppInfo["customDomain"].Value : false;
		//customLanguage = !string.IsNullOrWhiteSpace(ViewBag.AppInfo["language"].Value) ? ViewBag.AppInfo["language"].Value : string.Empty;
	}
	var otherLang = ViewBag.AppInfo["language"] == "tr" ? "en" : "tr";
	var error = ViewBag.Error;
}
<div class="col-md-4 login-sec">
	<img class="logo-img" src="@logo" />
	@if (!customDomain)
	{
		<span class="free-info-header">
			@Html.Raw(string.Format(Localizer["LoginRegisterInfo"].Value, "<a href=" + @Url.Action("Register", "Account", new { ReturnUrl = Model.ReturnUrl }) + ">" + Localizer["LoginRegisterInfoLink"].Value + "</a>"))
		</span>
	}

	<form asp-route="Login" class="login-form" role="form" id="login-form">
		<input type="hidden" asp-for="ReturnUrl" />
		<div class="form-group">
			<div class="input-group input-group-first">
				<span class="input-group-addon">
					<span class="flaticon-email26"></span>
				</span>
				<!--<label for="exampleInputEmail1" class="text-uppercase">E-Posta</label>-->
				<input class="form-control" placeholder="@Localizer["Email"]" asp-for="Username" id="Email" autofocus autocomplete="off">
			</div>
		</div>
		<div class="form-group">
			<div class="input-group">
				<span class="input-group-addon">
					<span class="flaticon-padlock50"></span>
				</span>
				<!--<label for="exampleInputEmail1" class="text-uppercase">E-Posta</label>-->
				<input type="password" class="form-control" placeholder="@Localizer["Password"]" asp-for="Password" id="Password" autocomplete="off">
			</div>
		</div>
		@if (error != null)
		{
			if (error == "WrongInfo")
			{
				<div class="error">@Localizer[error]</div>
			}
			else if (error == "notFound")
			{
				<div class="error">@Localizer["NotFound"]</div>
			}
		}
		<div class="error-all"></div>
		<div class="error-email"></div>
		<div class="error-pass"></div>
		<div class="form-check">
			<button type="submit" class="btn btn-login btn-block ladda-button" name="button" value="login" data-style="slide-right" tabindex="3">@Localizer["LoginButton"]</button>
			@if (!customDomain)
			{
				@if (Model.VisibleExternalProviders.Any())
				{
					@foreach (var provider in Model.VisibleExternalProviders)
					{
						<hr />
						<button type="button"
								asp-class=""
								asp-action="ExternalLogin"
								asp-route-provider="@provider.AuthenticationScheme"
								asp-route-returnUrl="@Model.ReturnUrl"
								class="btn btn-block add-button">
							@Localizer[provider.DisplayName]
						</button>
					}
				}
			}

			<div class="language">
				@if (multiLanguage)
				{
					@if (otherLang == "tr")
					{
						<a href="@Url.Action("ChangeLanguage", "Account", new { language = "tr", ReturnUrl = path })">@Localizer["TR"]</a> <span>|</span>
					}
					else if (otherLang == "en")
					{
						<a href="@Url.Action("ChangeLanguage", "Account", new { language = "en", ReturnUrl = path })">@Localizer["EN"]</a> <span>|</span>
					}
				}
				<a href="@Url.Action("ForgotPassword", "Auth", new {ReturnUrl = Model.ReturnUrl, Email = Model != null ? Model.Username : ""})" class="">@Localizer["ForgotPassword"]</a>
			</div>
		</div>
	</form>
</div>
@*
	<div class="login-page">
			<div class="page-header">
				<h1>Login</h1>
			</div>

			<partial name="_ValidationSummary" />

			<div class="row">
				@if (Model.EnableLocalLogin)
				{
					<div class="col-sm-6">
						<div class="panel panel-default">
							<div class="panel-heading">
								<h3 class="panel-title">Local Login</h3>
							</div>
							<div class="panel-body">

								<form asp-route="Login">
									<input type="hidden" asp-for="ReturnUrl" />

									<fieldset>
										<div class="form-group">
											<label asp-for="Username"></label>
											<input class="form-control" placeholder="Username" asp-for="Username" autofocus>
										</div>
										<div class="form-group">
											<label asp-for="Password"></label>
											<input type="password" class="form-control" placeholder="Password" asp-for="Password" autocomplete="off">
										</div>
										@if (Model.AllowRememberLogin)
										{
											<div class="form-group login-remember">
												<label asp-for="RememberLogin">
													<input asp-for="RememberLogin">
													<strong>Remember My Login</strong>
												</label>
											</div>
										}

										<div>
											<p>The default users are alice/bob, password: Pass123$</p>
										</div>

										<div class="form-group">
											<button class="btn btn-primary" name="button" value="login">Login</button>
											<button class="btn btn-default" name="button" value="cancel">Cancel</button>
										</div>
									</fieldset>
								</form>
							</div>
						</div>
					</div>
				}

				@if (Model.VisibleExternalProviders.Any())
				{
					<div class="col-md-6 col-sm-6 external-providers">
						<div class="panel panel-default">
							<div class="panel-heading">
								<h3 class="panel-title">External Login</h3>
							</div>
							<div class="panel-body">
								<ul class="list-inline">
									@foreach (var provider in Model.VisibleExternalProviders)
									{
										<li>
											<a class="btn btn-default"
											   asp-action="ExternalLogin"
											   asp-route-provider="@provider.AuthenticationScheme"
											   asp-route-returnUrl="@Model.ReturnUrl">
												@provider.DisplayName
											</a>
										</li>
									}
								</ul>
							</div>
						</div>
					</div>
				}

				@if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
				{
					<div class="alert alert-warning">
						<strong>Invalid login request</strong>
						There are no login schemes configured for this client.
					</div>
				}
			</div>
		</div>*@

@section scripts {
	<script>
		$(document).ready(function() {
			var postTry = false;

            $("#Email, #Password").keyup(function() {
                if (postTry) {
                    if (fieldsHasValue()) {
                        $(".error-all").removeClass("error");
                        $(".error-all").text("");
                        emailValidator();
                        passwordValidator();
                    } else {
                        removeFieldErrors();
                        $(".error-all").addClass("error");
                        $(".error-all").text("@Localizer["LoginFieldsRequired"]");
                    }
                }
            });

            $(".btn-login").click(function(e) {
                postTry = true;
				removeFieldErrors();
				var l = Ladda.create(this);
				l.start();
                if (fieldsHasValue()) {
                    $(".error-all").removeClass("error");
                    $(".error-all").text("");
					if (!emailValidator() || !passwordValidator()) {
						e.stopPropagation();
						e.preventDefault();
						l.stop();
					} else {
						$('#login-form').append('<input type="hidden" name="button" value="login" />');
						$('#login-form').submit();
					 }
                } else {
                    $(".error-all").addClass("error");
                    $(".error-all").text("@Localizer["LoginFieldsRequired"]");

                    e.stopPropagation();
                    e.preventDefault();
                    l.stop();
                }
            });

            function fieldsHasValue() {
                var emailValue = $("#Email").val();
                var passwordValue = $("#Password").val();
                if (emailValue === "" || passwordValue === "") {
                    return false;
                }
                return true;
            }

            function emailValidator() {
                var isValid = true;
                var fieldValue = $("#Email").val().toLowerCase().replace(/\ /g, "");
                var result = /^[a-z0-9._%+-]+@@[a-z0-9.-]+$/.test(fieldValue);
                if (fieldValue === "") {
                    removeFieldErrors();
                    $(".error-all").addClass("error");
                    $(".error-all").text("@Localizer["LoginFieldsRequired"]");
                    isValid = false;
                } else if (!result) {
                    $(".error-email").addClass("error");
                    $(".error-email").text("@Localizer["InvalidEmail"]");
                    isValid = false;
                } else {
                    $(".error-email").removeClass("error");
                    $(".error-email").text("");
                }
                return isValid;
            }

            function passwordValidator() {
                var isValid = true;
                var fieldValue = $("#Password").val();
                if (fieldValue === "") {
                    removeFieldErrors();
                    $(".error-all").addClass("error");
                    $(".error-all").text("@Localizer["LoginFieldsRequired"]");
                    isValid = false;
                } else if (fieldValue.length < 5) {
                    $(".error-pass").addClass("error");
                    $(".error-pass").text("@Localizer["PasswordMinimum"]");
                    isValid = false;
                } else {
                    $(".error-pass").removeClass("error");
                    $(".error-pass").text("");
                }
                return isValid;
            }

            function removeFieldErrors() {
                $(".error-pass").removeClass("error");
                $(".error-pass").text("");
                $(".error-email").removeClass("error");
                $(".error-email").text("");
                $(".error").text("").removeClass("error");
            }

            $("input").focus(function(e) {
                $(e.target).closest(".input-group").addClass("input-focus");
            });

            $("input").blur(function(e) {
                $(e.target).closest(".input-group").removeClass("input-focus");
            });
        });
	</script>
}
