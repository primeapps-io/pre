@model ResetPasswordViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{

    ViewBag.Title = "Reset Password";
    Layout = "~/Views/Shared/_LayoutAuthPrimeApps.cshtml";

    var app = "primeapps";
    if (ViewBag.AppInfo != null)
    {
        app = Model.ApplicationInfo.Name;
        ViewBag.Title = Model.ApplicationInfo.Title;
    }
    var lang = Model.ApplicationInfo.Language == "tr" ? "en" : "tr";
    var client = Model.ApplicationInfo.Name ?? "";
}

<div class="col-md-5 login-sec">
    <img class="logo-img" src="~/images/custom/studio-logo.svg" />
    <form asp-route="ResetPassword" class="login-form" role="form" id="reset-form">
        <input type="hidden" asp-for="@Model.ReturnUrl" />
        <input type="hidden" asp-for="@Model.Code" />
        <input type="hidden" asp-for="@Model.Guid" />
        <input type="hidden" name="client" value="@client" />

        <div class="form-group">
            <label for="Password" class="">@Localizer["Password"]</label>
            <input class="form-control" asp-for="Password" id="Password" autofocus autocomplete="off">
        </div>
        <div class="form-group">
            <label for="ConfirmPassword" class="">@Localizer["PasswordConfirm"]</label>
            <input type="password" class="form-control" asp-for="ConfirmPassword" id="ConfirmPassword" autocomplete="off">
        </div>
        @if (!string.IsNullOrWhiteSpace(Model.Error))
        {
            if (Model.Error == "InvalidToken")
            {
                <div class="error">@Localizer["PasswordRecoveryError"]</div>
            }
            else
            {
                <div class="error">@Localizer["NotFound"]</div>
            }
        }
        <div class="error-all"></div>
        <div class="error-pass"></div>
        <div class="form-check">
            <button type="submit" class="btn btn-login btn-block ladda-button" data-style="slide-right">@Localizer["ChangePassword"]</button>
        </div>
    </form>
    <a href="@Url.Action("Login", "Account", new { ReturnUrl = Model.ReturnUrl })" class="bottom-button">@Localizer["HaveAccount"]</a>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var postTry = false;

            $("#ConfirmPassword, #Password").keyup(function() {
                if (postTry) {
                    if (fieldsHasValue()) {
                        $(".error-all").removeClass("error");
                        $(".error-all").text("");
                        passwordValidator();
                    } else {
                        removeFieldErrors();
                        $(".error-all").addClass("error");
                        $(".error-all").text("@Localizer["RegisterFieldsRequired"]");
                    }
                }
            });

            function fieldsHasValue() {
                var confirmPasswordValue = $("#ConfirmPassword").val();
                var passwordValue = $("#Password").val();
                if (confirmPasswordValue === "" || passwordValue === "") {
                    return false;
                }
                return true;
            }

            function removeFieldErrors() {
                $(".error-pass").removeClass("error");
                $(".error-pass").text("");
            }

            $("input").focus(function (e) {
                $(e.target).closest(".input-group").addClass("input-focus");
            });

            $("input").blur(function (e) {
                $(e.target).closest(".input-group").removeClass("input-focus");
            });

            function passwordValidator() {
                var isValid = true;
                var fieldValue = $("#Password").val();
                var fieldConfirmValue = $("#ConfirmPassword").val();
                if (fieldValue === "") {
                    removeFieldErrors();
                    $(".error-all").addClass("error");
                    $(".error-all").text("@Localizer["RegisterFieldsRequired"]");
                    isValid = false;
                } else if (fieldValue.length < 6) {
                    $(".error-pass").addClass("error");
                    $(".error-pass").text("@Localizer["PasswordMinimum"]");
                    isValid = false;
                } else if (fieldValue !== fieldConfirmValue) {
                    $(".error-pass").addClass("error");
                    $(".error-pass").text("@Localizer["PasswordNotMatch"]");
                    isValid = false;
                } else {
                    $(".error-pass").removeClass("error");
                    $(".error-pass").text("");
                }
                return isValid;
            }


            $(".btn-login").click(function(e) {
                postTry = true;
                var l = Ladda.create(this);
                l.start();
                if (fieldsHasValue()) {
                    $(".error-all").removeClass("error");
                    $(".error-all").text("");
                    if (!passwordValidator()) {
                        e.stopPropagation();
                        e.preventDefault();
                        l.stop();
                    } else {
                        $("#reset-form").submit();
                    }
                } else {
                    $(".error-all").addClass("error");
                    $(".error-all").text("@Localizer["RegisterFieldsRequired"]");
                    e.stopPropagation();
                    e.preventDefault();
                    l.stop();
                }
            });
        });
    </script>
}
